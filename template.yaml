AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-project-v1

# We can add parameters
Parameters:
  ApiStageName:
    Type: String
    Default: dev

  sampleTableName:
    Type: String
    Default: sampleTableName

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    Runtime: nodejs16.x
    Tracing: Active
    Environment:
      Variables:
        Stage: !Ref ApiStageName
        SampleTableName: !Sub ${sampleTableName}-${ApiStageName}
        Region: !Sub ${AWS::Region}
  Api:
    TracingEnabled: true

Resources:
  GatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub cloud-project-${ApiStageName}-api
      StageName: !Ref ApiStageName 
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            IdentitySource: method.request.header.Authorization

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: AppUsers
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: CloudUserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  SampleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${sampleTableName}-${ApiStageName}
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SampleFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/sample-handler.default
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Events:
        Sample:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sample
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
        SampleActions:
          Type: Api
          Properties:
            Path: /sample/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
        SampleSubActions:
          Type: Api
          Properties:
            Path: /sample/{action}/{subAction}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/user-handler.default
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
      Events:
        UserActions:
          Type: Api
          Properties:
            Path: /user/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: NONE
        ProfileActions:
          Type: Api
          Properties:
            Path: /profile/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT: !Ref UserPoolClient

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: "true"
    DependsOn: ApplicationResourceGroup

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SampleApi:
    Description: API Gateway Endpoint
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/"
