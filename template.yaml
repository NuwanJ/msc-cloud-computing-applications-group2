AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-project-v1

Parameters:
  ApiStageName:
    Type: String
    Default: dev

  sampleTableName:
    Type: String
    Default: sampleTableName

  AppointmentsTableName:
    Type: String
    Default: appointments

  SourceEmailAddress:
    Type: String 
    Default: nuwan.20232219@iit.ac.lk

  Timezone:
    Type: String 
    Default: Asia/Colombo

  appointmentInterval:
    Type: Number
    Default: "60"

  appointmentThreshold:
    Type: Number
    Default: "30"


Globals:
  Function:
    Timeout: 60
    Runtime: nodejs16.x
    Tracing: Active
    Environment:
      Variables:
        Stage: !Ref ApiStageName
        Region: !Ref AWS::Region
        Timezone: !Ref Timezone
        SampleTableName: !Sub ${sampleTableName}-${ApiStageName}
        AppointmentTableName: !Sub ${AppointmentsTableName}-${ApiStageName}

  Api:
    TracingEnabled: true

Resources:
  GatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub cloud-project-${ApiStageName}-api
      StageName: !Ref ApiStageName 
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            IdentitySource: method.request.header.Authorization

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub AppUsers-${ApiStageName}
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: CloudUserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  SampleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${sampleTableName}-${ApiStageName}
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  AppointmentsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub ${AppointmentsTableName}-${ApiStageName}
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/user-handler.default
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
      Events:
        UserActions:
          Type: Api
          Properties:
            Path: /user/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: NONE
        ProfileActions:
          Type: Api
          Properties:
            Path: /profile/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT: !Ref UserPoolClient
          
  AppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/appointment-handler.default
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        Appointment:
          Type: Api 
          Properties:
            Path: /appointments
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
        AppointmentActions:
          Type: Api
          Properties:
            Path: /appointments/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
        AppointmentSubActions:
          Type: Api
          Properties:
            Path: /appointments/{action}/{appointmentId}
            Method: any
            RestApiId: !Ref GatewayAPI
            Auth:
              Authorizer: CognitoAuthorizer
      
      
  ReminderProcessor:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./
      Handler: ./dist/src/reminder-handler.default
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminSetUserPassword
              Resource:
                - !GetAtt UserPool.Arn
        - SQSSendMessagePolicy:
            PolicyName: SQSSendMessagePolicy
            QueueName: !Ref EmailQueue
            PolicyDocument:
              Statement:
                Effect: Allow
                Actions:
                  - sqs:SendMessage*
                  - sqs:SetQueueAttributes
                Resource: 
                  - "*"
                  
      Environment:
        Variables:
          QueueUrl: !GetAtt EmailQueue.QueueUrl
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT: !Ref UserPoolClient
          AppointmentInterval: !Ref appointmentInterval
          AppointmentThreshold: !Ref appointmentThreshold
      Events:
        # WebAPI:
        #   Type: Api 
        #   Properties:
        #     Path: /scheduler/reminder
        #     Method: any
        #     RestApiId: !Ref GatewayAPI
        Cron:
          Type: Schedule
          Properties:
            Schedule: cron(*/30 * * * ? *)


  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub emailQueue-${ApiStageName}
      VisibilityTimeout: 60 # Set the visibility timeout as needed
      MaximumMessageSize: 2048 # Set maximum message size as needed
      MessageRetentionPeriod: 86400 # Set message retention period in seconds as needed

  EmailQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/email-handler.default
      Policies:
        - AmazonSESFullAccess 
      Environment:
        Variables:
          QueueUrl: !GetAtt EmailQueue.QueueUrl
          SourceEmailAddress: !Ref SourceEmailAddress
          
      Events:
        EmailSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
            
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ""
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: "true"
    DependsOn: ApplicationResourceGroup

Outputs:
  SampleApi:
    Description: API Gateway Endpoint
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/"
