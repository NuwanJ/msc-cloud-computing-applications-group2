AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-project-v1

# We can add parameters
Parameters:
  ApiStageName:
    Type: String
    Default: dev

  sampleTableName:
    Type: String
    Default: sampleTableName

  AppointmentsTableName:
    Type: String
    Default: appointments

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    Runtime: nodejs16.x
    Tracing: Active
    Environment:
      Variables:
        Stage: !Ref ApiStageName
        SampleTableName: !Sub ${sampleTableName}-${ApiStageName}
        AppointmentsTableName: !Sub ${AppointmentsTable}-${ApiStageName}
  Api:
    TracingEnabled: true

Resources:
  GatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub cloud-project-${ApiStageName}-api
      StageName: !Ref ApiStageName # This is where we can set stage name

  SampleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${sampleTableName}-${ApiStageName}
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  AppointmentsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub ${AppointmentsTableName}-${ApiStageName}
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SampleFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./
      Handler: ./dist/src/sample-handler.default
      Policies:
         - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Events:
        Sample:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sample
            Method: any
            RestApiId: !Ref GatewayAPI
        SampleActions:
          Type: Api
          Properties:
            Path: /sample/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
        SampleSubActions:
          Type: Api
          Properties:
            Path: /sample/{action}/{subAction}
            Method: any
            RestApiId: !Ref GatewayAPI

  AppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ./dist/src/appointment-handler.default
      Policies:
         - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        Appointment:
          Type: Api 
          Properties:
            Path: /appointment
            Method: any
            RestApiId: !Ref GatewayAPI
        AppointmentActions:
          Type: Api
          Properties:
            Path: /appointment/{action}
            Method: any
            RestApiId: !Ref GatewayAPI
        AppointmentSubActions:
          Type: Api
          Properties:
            Path: /appointment/{action}/{appointmentId}
            Method: any
            RestApiId: !Ref GatewayAPI
  ReminderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./
      Handler: ./dist/src/reminder-handler.default
      Policies:
        - AmazonSESFullAccess 
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Events:
        WebAPI:
          Type: Api 
          Properties:
            Path: /scheduler/reminder
            Method: any
            RestApiId: !Ref GatewayAPI
        # Cron:
        #   Type: Schedule
        #   Properties:
        #     Schedule: cron(*/30 * * * ? *)


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ""
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ""
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: "true"
    DependsOn: ApplicationResourceGroup

Outputs:
  SampleApi:
    Description: API Gateway Endpoint URL
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/sample/"

  AppointmentsTable:
    Description: DynamoDB Table
    Value: !Ref AppointmentsTableName
